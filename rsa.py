import sys

def totient(p,q):
	return (p-1) * (q-1)

def comprime(a,b):
	return xgcd(a,b)[0] == 1

def choose_e(n,t):
	# 1 < e < phi(n)
	# coprime with n and phi(n)
	i = 3
	while i < t:
		if comprime(i,n) and comprime(i,t):
			return i
		i = i + 2

def xgcd(a,b):
	ox, x = 1, 0; oy, y = 0, 1
	while b:
		q = a/b
		x, ox = ox - q*x, x
		y, oy = oy - q*y, y
		a, b = b, a % b
	return a, ox, oy

def mi(a, m):
    g, x, y = xgcd(a, m)
    if g != 1:
        raise Exception('No modular inverse')
    return x%m

p = 28942881866957340471535607540997265284129383199791223749841299308603920615330469008554558835547740392412836913246705441859204096939789016923393486340378293831853571201695797565922614730705131500760263350902741195972261284092632998981208075033730268477888974159197387236334628232130648488550710774946492672644053526621188398926599914530653889794678143242703412322888223547262580469142893789726887609369818863072288269743568049015262839250162373139014861979580118667980290934247082550991777253834605634027649323251473929509311914271224702686051579858916597746047033920180026450509117695877340194015395941476756146157117
q = 27874459088225054527553339015782816362883578838343703879283192770329208720227353780583864979649848359006932104065452611618372018316100815891834083053933622700572752313593048829161647558266127633487800092446427813181650236389489380558431083355219133341677056025387102706702132373300922609824169133350404800409697460842915387111924704896271431527908449295185348808003666527677143483755932465304845348575805186818889235903984071951676147492815752407033290846266593374827433455724047250572127443990204486539072275076788746736695862234154672043265444025132246720863679108690510878225751580398985017384117586263776190897093

n = p * q

t = totient(p,q)

e = choose_e(n,t)
d = mi(e,t)

# dp = d % (p-1)
# dq = d % (q-1)
# iq = mi(q,p)
# ip = mi(p,q)

# m = int(sys.stdin.read())

# if m > n:
# 	print m
# 	exit("m is larger than n")


# c = pow(m,e,n)
# dm = pow(c,d,n)

# print(m,hex(c),dm)

print("encryption keys:\n-------------\ne\n{}\n\nn\n{}\n\nhex\n{}\n\n").format(e,n, hex(n))

try:
	c = int(sys.argv[1])
	print "Message is {}".format(pow(c,d,n))
except:
	print "No message given or error with message."
